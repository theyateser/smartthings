/**
 *  Fan for Sleeping
 *
 *  Copyright 2017 Matt Yates
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Fan for sleeping when it's hot",
    namespace: "theyateser",
    author: "Matt Yates",
    description: "Turn on fans when the temperature is above X and its between Yp and Za and youre not Away.",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")


preferences {
 	section("Which Devices?") {
        input "tempSensor", "capability.temperatureMeasurement", required: true, title: "Temperature"
    	input "thefan", "capability.switchLevel", required: true, title: "Fan"
    } 
    section("What set points?") {
        // name is "temperature1", type is "number"
        input "tempPoint", "number", title: "Temperature above... degrees (F)"
    	input "fanSetSpeed", "number", title: "Fan on speed (1-100)"
    }
    section("Turn on between what times?") {
        input "fromTime", "time", title: "From", required: true
        input "toTime", "time", title: "To", required: true
    }
// In the future: add above or below degree point; allow user to select mode(s) for activity
//Idea: monitor mode and if come from away to home, run logic to see if need to turn on
//Idea: instead of turning off at end of time window, look for motion/switch activity after some time and cut off fan "when things start to happen"
}

def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}

def initialize() {
	subscribe(tempSensor, "temperature", tempHandler)
    schedule(toTime, timesUpHandler)
}

// This section does something when the temperature changes
def tempHandler(evt) {
	log.debug "tempHandler called: $evt"
    // Define some variables
    def CurrentTemp = tempSensor.temperatureState // current temp
    log.debug "temperature value as an integer: ${CurrentTemp.integerValue}"
    def CurrentFanLevel = thefan.currentLevel //Current Fan Speed
    log.debug "the current level of the fan is: $CurrentFanLevel"
    def between = timeOfDayIsBetween(fromTime, toTime, new Date(), location.timeZone) // Are we in the selected time window?
    def currMode = location.mode // "Home", "Away", etc.
    log.debug "current mode is $currMode"
    //Start running logic
    if (between && currMode != "Away") 
    			{ // Test if in current time is between selected and not Away mode
                log.debug "I'm home and the time is right"
                if (CurrentTemp.integerValue > tempPoint) 
                	{ //Temp is above set point
                    if (CurrentFanLevel != fanSetSpeed) {
                        log.debug "I'm hot. Fan turned on!"
                        thefan.setLevel(fanSetSpeed)}
                    else {log.debug "I'm hot, but the fan is already at speed."}
                    } 
                else {
                    if (CurrentFanLevel == 0) {
                    	log.debug "The temp is at or below set point and fan is already off."}
                    else {
                        log.debug "I'm cold. Fan turned off!"
                        thefan.setLevel(0)
                        }
                }
     }
    else {
    	log.debug "It's outside the seleced time range or mode is away"
    	}
}
// When the end of the time window comes, turn off the fan
def timesUpHandler(evt) { 
	log.debug "tempHandler called: $evt"
    log.debug "Times up. Fan turned off!"
    thefan.setLevel(0)
    }
